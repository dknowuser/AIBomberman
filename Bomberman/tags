!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AIPlayer	AIPlayer.h	/^class AIPlayer: public Player$/;"	c
AIPlayerStates	AIPlayer.h	/^	enum class AIPlayerStates {$/;"	c	class:AIPlayer
ANALYSE	AIPlayer.h	/^		ANALYSE,$/;"	m	class:AIPlayer::AIPlayerStates
AddAnimationState	Animator.cpp	/^bool Animator::AddAnimationState(std::string name, TextureAtlas & atlas, size_t begin, size_t end, bool autoPlay)$/;"	f	class:Animator
Animate	Animator.cpp	/^void Animator::Animate(float dt)$/;"	f	class:Animator
AnimationStateInfo	Animator.h	/^	struct AnimationStateInfo$/;"	s	class:Animator
Animator	Animator.cpp	/^Animator::Animator()$/;"	f	class:Animator
Animator	Animator.h	/^class Animator$/;"	c
BOMB	Types.h	/^		BOMB,$/;"	e	enum:TT::TileType
BodyInfo	PhysicalBody.h	/^	MovableBodyInfo BodyInfo;$/;"	m	class:PhysicalBody
BodyPositionState	PhysicalBody.h	/^	enum BodyPositionState { OnSingleTile, OnTwoTilesHorizontal, OnTwoTilesVertical, OnFourTiles };$/;"	g	class:PhysicalBody
Bomb	Bomb.cpp	/^Bomb::Bomb(bool setColor)$/;"	f	class:Bomb
Bomb	Bomb.h	/^class Bomb :public sf::Drawable, public PhysicalBody$/;"	c
BombManager	BombManager.cpp	/^BombManager::BombManager()$/;"	f	class:BombManager
BombManager	BombManager.h	/^class BombManager$/;"	c
Button	Button.cpp	/^Button::Button(sf::Vector2f position, sf::Vector2i size, std::string pressTexture_src, std::string unpressTexture_src, std::string text)$/;"	f	class:Button
Button	Button.h	/^class Button$/;"	c
COMPILER	Makefile	/^COMPILER=g++$/;"	m
COUNT	Types.h	/^		COUNT$/;"	e	enum:TT::TileType
ChangeActiveState	Animator.cpp	/^bool Animator::ChangeActiveState(const std::string & name)$/;"	f	class:Animator
ChangeTileTexture	LevelView.cpp	/^void LevelView::ChangeTileTexture(size_t x, size_t y, TT::TileType tileNumber)$/;"	f	class:LevelView
Check	Button.cpp	/^bool Button::Check(sf::Vector2i mousePosition)$/;"	f	class:Button
DOUBLE_INDESTRUCTIBLE_WALL	Types.h	/^		DOUBLE_INDESTRUCTIBLE_WALL,$/;"	e	enum:TT::TileType
DOUBLE_WEAK_WALL	Types.h	/^		DOUBLE_WEAK_WALL,$/;"	e	enum:TT::TileType
DecreaseRespawns	Player.cpp	/^void Player::DecreaseRespawns(short val)$/;"	f	class:Player
DeleteBomb	Player.cpp	/^void Player::DeleteBomb()$/;"	f	class:Player
DestroyTile	Level.cpp	/^bool Level::DestroyTile(size_t x, size_t y, bool destroyTexture)$/;"	f	class:Level
DoAction	Button.cpp	/^void Button::DoAction()$/;"	f	class:Button
Down	Ray.h	/^		Down,$/;"	e	enum:Ray::Side
FLAGS	Makefile	/^FLAGS=-g -std=c++11$/;"	m
FixPosition	Bomb.cpp	/^void Bomb::FixPosition()$/;"	f	class:Bomb
GUI	GUI.cpp	/^GUI::GUI()$/;"	f	class:GUI
GUI	GUI.h	/^class GUI:$/;"	c
Game	Game.cpp	/^Game::Game(sf::RenderWindow* window)$/;"	f	class:Game
Game	Game.h	/^class Game$/;"	c
GetActiveState	Animator.cpp	/^std::string Animator::GetActiveState() const$/;"	f	class:Animator
GetBomb	Player.cpp	/^Bomb * Player::GetBomb() const$/;"	f	class:Player
GetBombCollidingWithCoordinates	Player.cpp	/^sf::Vector2i Player::GetBombCollidingWithCoordinates() const$/;"	f	class:Player
GetCellSizeX	TextureAtlas.cpp	/^size_t TextureAtlas::GetCellSizeX() const$/;"	f	class:TextureAtlas
GetCellSizeY	TextureAtlas.cpp	/^size_t TextureAtlas::GetCellSizeY() const$/;"	f	class:TextureAtlas
GetCount	TextureAtlas.cpp	/^size_t TextureAtlas::GetCount() const$/;"	f	class:TextureAtlas
GetHeight	Level.cpp	/^size_t Level::GetHeight() const$/;"	f	class:Level
GetIsAlive	Player.cpp	/^bool Player::GetIsAlive() const$/;"	f	class:Player
GetNextPositionInTileCoordsX	Bomb.cpp	/^int Bomb::GetNextPositionInTileCoordsX()$/;"	f	class:Bomb
GetNextPositionInTileCoordsY	Bomb.cpp	/^int Bomb::GetNextPositionInTileCoordsY()$/;"	f	class:Bomb
GetPositionInTileCoordinatesX	Bomb.cpp	/^int Bomb::GetPositionInTileCoordinatesX()$/;"	f	class:Bomb
GetPositionInTileCoordinatesY	Bomb.cpp	/^int Bomb::GetPositionInTileCoordinatesY()$/;"	f	class:Bomb
GetPositionInTilesCoordsX	Player.cpp	/^int Player::GetPositionInTilesCoordsX() const$/;"	f	class:Player
GetPositionInTilesCoordsY	Player.cpp	/^int Player::GetPositionInTilesCoordsY() const$/;"	f	class:Player
GetPositionPointerInTileCoordinatesX	Bomb.cpp	/^int * Bomb::GetPositionPointerInTileCoordinatesX()$/;"	f	class:Bomb
GetPositionPointerInTileCoordinatesY	Bomb.cpp	/^int * Bomb::GetPositionPointerInTileCoordinatesY()$/;"	f	class:Bomb
GetPositionX	PhysicalBody.cpp	/^float PhysicalBody::GetPositionX() const$/;"	f	class:PhysicalBody
GetPositionY	PhysicalBody.cpp	/^float PhysicalBody::GetPositionY() const$/;"	f	class:PhysicalBody
GetRay	Player.cpp	/^Ray* Player::GetRay(unsigned int side) const$/;"	f	class:Player
GetRayPhysicalBody	Bomb.cpp	/^Ray* Bomb::GetRayPhysicalBody(unsigned int side)$/;"	f	class:Bomb
GetRespawnsCount	Player.cpp	/^short Player::GetRespawnsCount() const$/;"	f	class:Player
GetSide	Ray.cpp	/^int Ray::GetSide()$/;"	f	class:Ray
GetSideBombCollidingWith	Player.cpp	/^sf::Vector2i Player::GetSideBombCollidingWith() const$/;"	f	class:Player
GetSizeX	PhysicalBody.cpp	/^float PhysicalBody::GetSizeX() const$/;"	f	class:PhysicalBody
GetSizeY	PhysicalBody.cpp	/^float PhysicalBody::GetSizeY() const$/;"	f	class:PhysicalBody
GetSpritePointer	Button.cpp	/^sf::Sprite* Button::GetSpritePointer()$/;"	f	class:Button
GetState	Bomb.cpp	/^Bomb::State Bomb::GetState()$/;"	f	class:Bomb
GetTextPointer	Button.cpp	/^sf::Text* Button::GetTextPointer()$/;"	f	class:Button
GetTile	Level.cpp	/^TT::TileType Level::GetTile(size_t x, size_t y)$/;"	f	class:Level
GetValue	Slider.cpp	/^float Slider::GetValue() const$/;"	f	class:Slider
GetVelocityX	PhysicalBody.cpp	/^float PhysicalBody::GetVelocityX() const$/;"	f	class:PhysicalBody
GetVelocityY	PhysicalBody.cpp	/^float PhysicalBody::GetVelocityY() const$/;"	f	class:PhysicalBody
GetWidth	Level.cpp	/^size_t Level::GetWidth() const$/;"	f	class:Level
GetWin	Player.cpp	/^bool Player::GetWin() const$/;"	f	class:Player
HALF_INDESTRUCTIBLE_WALL	Types.h	/^		HALF_INDESTRUCTIBLE_WALL,$/;"	e	enum:TT::TileType
HasBomb	Player.cpp	/^bool Player::HasBomb() const$/;"	f	class:Player
INDESTRUCTIBLE_WALL	Types.h	/^		INDESTRUCTIBLE_WALL,$/;"	e	enum:TT::TileType
IncreaseRespawns	Player.cpp	/^void Player::IncreaseRespawns(short val)$/;"	f	class:Player
Init	BombManager.cpp	/^void BombManager::Init(Level * level, std::vector<AIPlayer*>* players)$/;"	f	class:BombManager
Init	GUI.cpp	/^void GUI::Init(sf::Font * font, short textSize, int screenWidth, int screenHeight, bool* playAgain, bool* exit, bool* enterMenu)$/;"	f	class:GUI
Init	PhysicsEngine.cpp	/^void PhysicsEngine::Init(Level * level, std::vector<AIPlayer*>* players)$/;"	f	class:PhysicsEngine
Initialize	Game.cpp	/^void Game::Initialize(float musicVolume, float soundVolume, int numberOfLives)$/;"	f	class:Game
IsClicked	Option.cpp	/^bool Option::IsClicked()$/;"	f	class:Option
IsCollidingWithBomb	Player.cpp	/^bool Player::IsCollidingWithBomb() const$/;"	f	class:Player
IsCollision	PhysicalBody.cpp	/^bool PhysicalBody::IsCollision(PhysicalBody & pyRef)$/;"	f	class:PhysicalBody
IsCollision	PhysicalBody.cpp	/^bool PhysicalBody::IsCollision(float x, float y, float sizeX, float sizeY)$/;"	f	class:PhysicalBody
IsObjectInRay	Bomb.cpp	/^bool Bomb::IsObjectInRay(PhysicalBody & physicalBody)$/;"	f	class:Bomb
IsPlaying	Animator.cpp	/^bool Animator::IsPlaying()$/;"	f	class:Animator
IsTileCollidingInAxisX	Player.cpp	/^bool Player::IsTileCollidingInAxisX(size_t x) const$/;"	f	class:Player
IsTileCollidingInAxisY	Player.cpp	/^bool Player::IsTileCollidingInAxisY(size_t y) const$/;"	f	class:Player
Left	Ray.h	/^		Left,$/;"	e	enum:Ray::Side
Level	Level.cpp	/^Level::Level()$/;"	f	class:Level
Level	Level.h	/^class Level$/;"	c
LevelView	LevelView.cpp	/^LevelView::LevelView()$/;"	f	class:LevelView
LevelView	LevelView.h	/^class LevelView : public sf::Drawable$/;"	c
LoadFromFile	Level.cpp	/^bool Level::LoadFromFile(const std::string & path)$/;"	f	class:Level
LoadFromFile	TextureAtlas.cpp	/^bool TextureAtlas::LoadFromFile(const std::string & path)$/;"	f	class:TextureAtlas
MAGIC_HEADER	Level.h	11;"	d
MAX_RAY_SIZE	Bomb.h	/^	const int MAX_RAY_SIZE = 4;$/;"	m	class:Bomb
MOVE	AIPlayer.h	/^		MOVE,$/;"	m	class:AIPlayer::AIPlayerStates
Menu	Menu.cpp	/^Menu::Menu(size_t width, size_t height)$/;"	f	class:Menu
Menu	Menu.h	/^class Menu$/;"	c
MovableBodyInfo	PhysicalBody.h	/^	struct MovableBodyInfo$/;"	s	class:PhysicalBody
NONE	Types.h	/^		NONE,$/;"	e	enum:TT::TileType
NONE_WITH_SHADOW	Types.h	/^		NONE_WITH_SHADOW,$/;"	e	enum:TT::TileType
OnActionKeyPressed	Player.cpp	/^void Player::OnActionKeyPressed()$/;"	f	class:Player
OnBombCollision	Player.cpp	/^void Player::OnBombCollision()$/;"	f	class:Player
OnFourTiles	PhysicalBody.h	/^	enum BodyPositionState { OnSingleTile, OnTwoTilesHorizontal, OnTwoTilesVertical, OnFourTiles };$/;"	e	enum:PhysicalBody::BodyPositionState
OnMoveKeyPressed	Player.cpp	/^void Player::OnMoveKeyPressed(int x, int y)$/;"	f	class:Player
OnSingleTile	PhysicalBody.h	/^	enum BodyPositionState { OnSingleTile, OnTwoTilesHorizontal, OnTwoTilesVertical, OnFourTiles };$/;"	e	enum:PhysicalBody::BodyPositionState
OnTwoTilesHorizontal	PhysicalBody.h	/^	enum BodyPositionState { OnSingleTile, OnTwoTilesHorizontal, OnTwoTilesVertical, OnFourTiles };$/;"	e	enum:PhysicalBody::BodyPositionState
OnTwoTilesVertical	PhysicalBody.h	/^	enum BodyPositionState { OnSingleTile, OnTwoTilesHorizontal, OnTwoTilesVertical, OnFourTiles };$/;"	e	enum:PhysicalBody::BodyPositionState
Option	Option.cpp	/^Option::Option(sf::Font * fontPointer, std::string optionName, short characterSize, short posX, short posY, sf::Color buttonCol, sf::Color buttonSelected)$/;"	f	class:Option
Option	Option.h	/^class Option :$/;"	c
PLACE	AIPlayer.h	/^		PLACE,$/;"	m	class:AIPlayer::AIPlayerStates
Pause	Animator.cpp	/^void Animator::Pause()$/;"	f	class:Animator
PhysicalBody	PhysicalBody.cpp	/^PhysicalBody::PhysicalBody()$/;"	f	class:PhysicalBody
PhysicalBody	PhysicalBody.h	/^class PhysicalBody$/;"	c
PhysicsEngine	PhysicsEngine.cpp	/^PhysicsEngine::PhysicsEngine()$/;"	f	class:PhysicsEngine
PhysicsEngine	PhysicsEngine.h	/^class PhysicsEngine$/;"	c
Play	Animator.cpp	/^void Animator::Play()$/;"	f	class:Animator
Player	Player.cpp	/^Player::Player() $/;"	f	class:Player
Player	Player.h	/^class Player : public sf::Drawable, public PhysicalBody$/;"	c
Ray	Ray.cpp	/^Ray::Ray(Side side)$/;"	f	class:Ray
Ray	Ray.h	/^class Ray :public PhysicalBody, public sf::Drawable$/;"	c
Respawn	Player.cpp	/^void Player::Respawn()$/;"	f	class:Player
Right	Ray.h	/^		Right$/;"	e	enum:Ray::Side
Run	Game.cpp	/^bool Game::Run()$/;"	f	class:Game
Run	Menu.cpp	/^void Menu::Run()$/;"	f	class:Menu
SPEED	Bomb.h	/^	const int SPEED = 200;$/;"	m	class:Bomb
SetAfterRespawnSafeTime	Player.cpp	/^void Player::SetAfterRespawnSafeTime(float value)$/;"	f	class:Player
SetAlive	Player.cpp	/^void Player::SetAlive()$/;"	f	class:Player
SetAnimationSpeed	Animator.cpp	/^void Animator::SetAnimationSpeed(float speed)$/;"	f	class:Animator
SetAnimator	Bomb.cpp	/^void Bomb::SetAnimator(Animator & animator, size_t width, size_t height)$/;"	f	class:Bomb
SetAnimator	Player.cpp	/^void Player::SetAnimator(Animator& animator, size_t width, size_t height)$/;"	f	class:Player
SetAnimator	Ray.cpp	/^void Ray::SetAnimator(Animator & animator)$/;"	f	class:Ray
SetColor	Player.cpp	/^void Player::SetColor(int i)$/;"	f	class:Player
SetDelayBetweenFrames	Animator.cpp	/^void Animator::SetDelayBetweenFrames(float delay)$/;"	f	class:Animator
SetDetonationTime	Bomb.cpp	/^void Bomb::SetDetonationTime(sf::Time time)$/;"	f	class:Bomb
SetIsAlive	Player.cpp	/^void Player::SetIsAlive(bool var)$/;"	f	class:Player
SetIsCollidingWithBomb	Player.cpp	/^void Player::SetIsCollidingWithBomb(bool value)$/;"	f	class:Player
SetLevel	LevelView.cpp	/^void LevelView::SetLevel(Level * level, TextureAtlas* atlas)$/;"	f	class:LevelView
SetLevelPointer	Bomb.cpp	/^void Bomb::SetLevelPointer(Level * level)$/;"	f	class:Bomb
SetLevelPointer	Player.cpp	/^void Player::SetLevelPointer(Level * level)$/;"	f	class:Player
SetLevelView	Level.cpp	/^void Level::SetLevelView(LevelView * view)$/;"	f	class:Level
SetLoop	Animator.cpp	/^void Animator::SetLoop(bool loop)$/;"	f	class:Animator
SetMoveDirection	Bomb.cpp	/^void Bomb::SetMoveDirection(sf::Vector2i direction)$/;"	f	class:Bomb
SetMovementX	PhysicalBody.cpp	/^void PhysicalBody::SetMovementX(float movement)$/;"	f	class:PhysicalBody
SetMovementY	PhysicalBody.cpp	/^void PhysicalBody::SetMovementY(float movement)$/;"	f	class:PhysicalBody
SetPosition	Bomb.cpp	/^void Bomb::SetPosition(int x, int y)$/;"	f	class:Bomb
SetPosition	Ray.cpp	/^void Ray::SetPosition(float x, float y)$/;"	f	class:Ray
SetPositionX	PhysicalBody.cpp	/^void PhysicalBody::SetPositionX(float x)$/;"	f	class:PhysicalBody
SetPositionY	PhysicalBody.cpp	/^void PhysicalBody::SetPositionY(float y)$/;"	f	class:PhysicalBody
SetRayOnScreenTime	Bomb.cpp	/^void Bomb::SetRayOnScreenTime(sf::Time time)$/;"	f	class:Bomb
SetRaySpriteSize	Ray.cpp	/^void Ray::SetRaySpriteSize(unsigned short size)$/;"	f	class:Ray
SetRespawnPosition	Player.cpp	/^void Player::SetRespawnPosition(size_t x, size_t y)$/;"	f	class:Player
SetRespawns	Player.cpp	/^void Player::SetRespawns(short hp)$/;"	f	class:Player
SetSideBombCollidingWith	Player.cpp	/^void Player::SetSideBombCollidingWith(int x, int y)$/;"	f	class:Player
SetSize	PhysicalBody.cpp	/^void PhysicalBody::SetSize(float x, float y)$/;"	f	class:PhysicalBody
SetSprite	Animator.cpp	/^void Animator::SetSprite(sf::Sprite & sprite)$/;"	f	class:Animator
SetSpriteTextureByIndex	TextureAtlas.cpp	/^void TextureAtlas::SetSpriteTextureByIndex(sf::Sprite & sprite, size_t index)$/;"	f	class:TextureAtlas
SetTileAsBomb	Level.cpp	/^void Level::SetTileAsBomb(size_t x, size_t y)$/;"	f	class:Level
SetTileAsDestroyable	Level.cpp	/^void Level::SetTileAsDestroyable(size_t x, size_t y)$/;"	f	class:Level
SetUpBomb	Player.cpp	/^void Player::SetUpBomb(TextureAtlas* atlasBomb, TextureAtlas* atlasRay)$/;"	f	class:Player
SetUpRay	Bomb.cpp	/^void Bomb::SetUpRay(TextureAtlas * atlas)$/;"	f	class:Bomb
SetValue	Slider.cpp	/^void Slider::SetValue(float value)$/;"	f	class:Slider
SetVelocity	PhysicalBody.cpp	/^void PhysicalBody::SetVelocity(float x, float y)$/;"	f	class:PhysicalBody
SetVolume	Bomb.cpp	/^void Bomb::SetVolume(float volume)$/;"	f	class:Bomb
SetVolume	Player.cpp	/^void Player::SetVolume(float volume)$/;"	f	class:Player
SetWin	Player.cpp	/^void Player::SetWin(bool val)$/;"	f	class:Player
Side	Ray.h	/^	enum Side$/;"	g	class:Ray
Slider	Slider.cpp	/^Slider::Slider(sliderOrientation orientation, sf::Vector2f beltBeginPosition, float beltLenght, int beltThickness, float sliderBeginXPosition, float sliderLenght, int sliderThickness, int grasperThickness, sf::Color beltColor, sf::Color sliderColor, sf::Color sliderAfterGrasperColor, sf::Color grasperColor, bool shadowEffect)$/;"	f	class:Slider
Slider	Slider.h	/^class Slider :$/;"	c
Spawn	Player.cpp	/^void Player::Spawn()$/;"	f	class:Player
State	Bomb.h	/^	enum State$/;"	g	class:Bomb
Stop	Animator.cpp	/^void Animator::Stop()$/;"	f	class:Animator
StopMoving	Bomb.cpp	/^void Bomb::StopMoving()$/;"	f	class:Bomb
TILE_SIZE	Bomb.h	/^	static const int TILE_SIZE = 64;$/;"	m	class:Bomb
TILE_SIZE	Game.h	/^public: const int TILE_SIZE = 64;$/;"	m	class:Game
TILE_SIZE	LevelView.h	/^	int TILE_SIZE;$/;"	m	class:LevelView
TILE_SIZE	PhysicsEngine.h	/^	const int TILE_SIZE = 64;$/;"	m	class:PhysicsEngine
TILE_SIZE	Player.h	/^	const int TILE_SIZE = 64;$/;"	m	class:Player
TILE_SIZE	Ray.h	/^	const int TILE_SIZE = 64;$/;"	m	class:Ray
TT	Types.h	/^namespace TT {$/;"	n
TextureAtlas	TextureAtlas.cpp	/^TextureAtlas::TextureAtlas()$/;"	f	class:TextureAtlas
TextureAtlas	TextureAtlas.h	/^class TextureAtlas$/;"	c
TileType	Types.h	/^	enum TileType$/;"	g	namespace:TT
TrimByGrid	TextureAtlas.cpp	/^bool TextureAtlas::TrimByGrid(size_t cellSizeX, size_t cellSizeY)$/;"	f	class:TextureAtlas
Up	Ray.h	/^		Up,$/;"	e	enum:Ray::Side
Update	Bomb.cpp	/^void Bomb::Update(float dt)$/;"	f	class:Bomb
Update	BombManager.cpp	/^void BombManager::Update(float dt)$/;"	f	class:BombManager
Update	Button.cpp	/^void Button::Update(sf::Vector2i mousePosition, bool buttonPressed)$/;"	f	class:Button
Update	Option.cpp	/^void Option::Update(short & mousePosX, short & mousePosY)$/;"	f	class:Option
Update	PhysicsEngine.cpp	/^void PhysicsEngine::Update(float delta)$/;"	f	class:PhysicsEngine
Update	Player.cpp	/^void Player::Update(float dt)$/;"	f	class:Player
Update	Ray.cpp	/^void Ray::Update(float dt)$/;"	f	class:Ray
Update	Slider.cpp	/^void Slider::Update(sf::Vector2i mousePos, sf::Event* eventPointer)$/;"	f	class:Slider
UpdateStats	GUI.cpp	/^void GUI::UpdateStats(std::vector<AIPlayer*>* players, short mouseX, short mouseY)$/;"	f	class:GUI
UpdateStats	GUI.cpp	/^void GUI::UpdateStats(std::vector<AIPlayer*>* players, short mouseX, short mouseY, bool & playAgain, bool & exit, bool & enterMenu)$/;"	f	class:GUI
WEAK_WALL	Types.h	/^		WEAK_WALL,$/;"	e	enum:TT::TileType
atlas	Animator.h	/^		TextureAtlas* atlas;$/;"	m	struct:Animator::AnimationStateInfo
beg	Animator.h	/^		size_t beg; \/\/ first frame (inclusive)$/;"	m	struct:Animator::AnimationStateInfo
belt	Slider.h	/^	sf::RectangleShape* belt;$/;"	m	class:Slider
bombs	BombManager.h	/^	std::map<std::pair<int*, int*>, Bomb*> bombs;$/;"	m	class:BombManager
centerX	PhysicalBody.h	/^		unsigned int centerX;$/;"	m	struct:PhysicalBody::MovableBodyInfo
centerY	PhysicalBody.h	/^		unsigned int centerY;$/;"	m	struct:PhysicalBody::MovableBodyInfo
checkBombsAfterExplosionsCollisions	BombManager.cpp	/^void BombManager::checkBombsAfterExplosionsCollisions()$/;"	f	class:BombManager
down	Bomb.h	/^		int down;$/;"	m	struct:Bomb::rayLength
downBound	PhysicalBody.h	/^		unsigned int downBound;$/;"	m	struct:PhysicalBody::MovableBodyInfo
draw	Bomb.cpp	/^void Bomb::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:Bomb
draw	GUI.cpp	/^void GUI::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:GUI
draw	Game.cpp	/^void Game::draw()$/;"	f	class:Game
draw	LevelView.cpp	/^void LevelView::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:LevelView
draw	Menu.cpp	/^void Menu::draw()$/;"	f	class:Menu
draw	Option.cpp	/^void Option::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:Option
draw	Player.cpp	/^void Player::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:Player
draw	Ray.cpp	/^void Ray::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:Ray
draw	Slider.cpp	/^void Slider::draw(sf::RenderTarget & target, sf::RenderStates states) const$/;"	f	class:Slider
end	Animator.h	/^		size_t end; \/\/ last frame (inclusive)$/;"	m	struct:Animator::AnimationStateInfo
endGame	Player.cpp	/^void Player::endGame()$/;"	f	class:Player
enterMenu	Game.h	/^	bool enterMenu;$/;"	m	class:Game
explode	Bomb.cpp	/^void Bomb::explode()$/;"	f	class:Bomb
exploded	Bomb.h	/^		exploded$/;"	e	enum:Bomb::State
exploding	Bomb.h	/^		exploding,$/;"	e	enum:Bomb::State
gatherBombInformation	BombManager.cpp	/^void BombManager::gatherBombInformation()$/;"	f	class:BombManager
getRaySizeAfterCollisions	Bomb.cpp	/^unsigned short Bomb::getRaySizeAfterCollisions(Ray::Side side)$/;"	f	class:Bomb
grasper	Slider.h	/^	decltype(belt) grasper;$/;"	m	class:Slider
handleBombKicking	BombManager.cpp	/^void BombManager::handleBombKicking(float dt)$/;"	f	class:BombManager
horizontal	Slider.h	/^	enum sliderOrientation{vertical,horizontal};$/;"	e	enum:Slider::sliderOrientation
initGameplay	Game.cpp	/^void Game::initGameplay(const std::string & lvlPath)$/;"	f	class:Game
isBombExplosion	Player.cpp	/^bool Player::isBombExplosion() const$/;"	f	class:Player
isMoving	Bomb.cpp	/^bool Bomb::isMoving()$/;"	f	class:Bomb
isSelected	Option.cpp	/^bool Option::isSelected(short & posX, short & posY)$/;"	f	class:Option
it	BombManager.h	/^	std::map<std::pair<int*, int*>, Bomb*>::iterator it;$/;"	m	class:BombManager
left	Bomb.h	/^		int left;$/;"	m	struct:Bomb::rayLength
leftBound	PhysicalBody.h	/^		unsigned int leftBound;$/;"	m	struct:PhysicalBody::MovableBodyInfo
level	Bomb.h	/^	Level* level;$/;"	m	class:Bomb
level	Player.h	/^	Level * level;$/;"	m	class:Player
m_activeStateInfo	Animator.h	/^	AnimationStateInfo* m_activeStateInfo;$/;"	m	class:Animator
m_activeStateName	Animator.h	/^	std::string m_activeStateName;$/;"	m	class:Animator
m_animIsPlaying	Animator.h	/^	bool m_animIsPlaying;$/;"	m	class:Animator
m_animationSpeed	Animator.h	/^	float m_animationSpeed;$/;"	m	class:Animator
m_animator	Bomb.h	/^	Animator* m_animator;$/;"	m	class:Bomb
m_animator	Player.h	/^	Animator* m_animator;$/;"	m	class:Player
m_animator	Ray.h	/^	Animator* m_animator;$/;"	m	class:Ray
m_atlas	LevelView.h	/^	TextureAtlas * m_atlas;$/;"	m	class:LevelView
m_atlases	Game.h	/^	std::vector<TextureAtlas*> m_atlases; \/\/ [0]-terrain, [1] - bomb,[3] - player , [>3] more players$/;"	m	class:Game
m_backgroundSprite	Menu.h	/^	sf::Sprite m_backgroundSprite;$/;"	m	class:Menu
m_backgroundTexture	Menu.h	/^	sf::Texture m_backgroundTexture;$/;"	m	class:Menu
m_bomb	Player.h	/^	Bomb * m_bomb;$/;"	m	class:Player
m_bombAnimator	Player.h	/^	Animator* m_bombAnimator;$/;"	m	class:Player
m_bombCollidingWithLevelCoords	Player.h	/^	sf::Vector2i m_bombCollidingWithLevelCoords;$/;"	m	class:Player
m_bombManager	Game.h	/^	BombManager* m_bombManager;$/;"	m	class:Game
m_bombRayTextureAtlas	Player.h	/^	TextureAtlas * m_bombRayTextureAtlas;$/;"	m	class:Player
m_bombTextureAtlas	Player.h	/^	TextureAtlas* m_bombTextureAtlas;$/;"	m	class:Player
m_buttonNormal	Option.h	/^	sf::Color m_buttonNormal;$/;"	m	class:Option
m_buttonSelected	Option.h	/^	sf::Color m_buttonSelected;$/;"	m	class:Option
m_buttonsPointers	Menu.h	/^	Button* m_buttonsPointers[4];$/;"	m	class:Menu
m_canBeDamaged	Player.h	/^	bool m_canBeDamaged;$/;"	m	class:Player
m_cellHeight	TextureAtlas.h	/^	size_t m_cellHeight;$/;"	m	class:TextureAtlas
m_cellWidth	TextureAtlas.h	/^	size_t m_cellWidth;$/;"	m	class:TextureAtlas
m_characterSize	Option.h	/^	short m_characterSize;$/;"	m	class:Option
m_clicked	Option.h	/^	bool m_clicked;$/;"	m	class:Option
m_columns	TextureAtlas.h	/^	size_t m_columns;$/;"	m	class:TextureAtlas
m_count	TextureAtlas.h	/^	size_t m_count;$/;"	m	class:TextureAtlas
m_credits	Menu.h	/^	bool m_credits;$/;"	m	class:Menu
m_creditsSprite	Menu.h	/^	sf::Sprite m_creditsSprite;$/;"	m	class:Menu
m_creditsTexture	Menu.h	/^	sf::Texture m_creditsTexture;$/;"	m	class:Menu
m_currentFrame	Animator.h	/^	size_t m_currentFrame;$/;"	m	class:Animator
m_data	Level.h	/^	std::vector< std::vector<TT::TileType> > m_data;$/;"	m	class:Level
m_data	LevelView.h	/^	std::vector < std::vector<sf::Sprite> > m_data;$/;"	m	class:LevelView
m_delay	Animator.h	/^	float m_delay;$/;"	m	class:Animator
m_destroyableTiles	Level.h	/^	std::map<int, std::pair<int, int> > m_destroyableTiles;$/;"	m	class:Level
m_destroyableTilesKey	Level.h	/^	int m_destroyableTilesKey;$/;"	m	class:Level
m_detonationClock	Bomb.h	/^	sf::Clock m_detonationClock;$/;"	m	class:Bomb
m_detonationTime	Bomb.h	/^	sf::Time m_detonationTime;$/;"	m	class:Bomb
m_direction	Bomb.h	/^	sf::Vector2i m_direction;$/;"	m	class:Bomb
m_elapsedTime	Animator.h	/^	float m_elapsedTime;$/;"	m	class:Animator
m_endOfGame	Game.h	/^	bool m_endOfGame;$/;"	m	class:Game
m_endOfGameMenuView	GUI.h	/^	bool m_endOfGameMenuView;$/;"	m	class:GUI
m_enterMenu	GUI.h	/^	bool* m_enterMenu;$/;"	m	class:GUI
m_exit	GUI.h	/^	bool* m_exit;$/;"	m	class:GUI
m_exit	Game.h	/^	bool m_exit;$/;"	m	class:Game
m_exit	Menu.h	/^	bool m_exit;$/;"	m	class:Menu
m_exitButton	GUI.h	/^	Button* m_exitButton;$/;"	m	class:GUI
m_explosionSound	Bomb.h	/^	sf::Sound m_explosionSound;$/;"	m	class:Bomb
m_font	Button.h	/^	sf::Font m_font;$/;"	m	class:Button
m_font	Game.h	/^	sf::Font* m_font;$/;"	m	class:Game
m_font	Menu.h	/^	sf::Font m_font;$/;"	m	class:Menu
m_font	Option.h	/^	sf::Font * m_font;$/;"	m	class:Option
m_frame	GUI.h	/^	sf::Sprite* m_frame;$/;"	m	class:GUI
m_frameTexture	GUI.h	/^	sf::Texture* m_frameTexture;$/;"	m	class:GUI
m_game	Menu.h	/^	Game* m_game;$/;"	m	class:Menu
m_gameGUIView	GUI.h	/^	bool m_gameGUIView;$/;"	m	class:GUI
m_gameLogoSprite	Menu.h	/^	sf::Sprite m_gameLogoSprite;$/;"	m	class:Menu
m_gameLogoTexture	Menu.h	/^	sf::Texture m_gameLogoTexture;$/;"	m	class:Menu
m_gameVersion	Menu.h	/^	sf::Text m_gameVersion;$/;"	m	class:Menu
m_gui	Game.h	/^	GUI * m_gui;$/;"	m	class:Game
m_height	Level.h	/^	size_t m_height;$/;"	m	class:Level
m_isAlive	Player.h	/^	bool m_isAlive;$/;"	m	class:Player
m_isCollidingWithBomb	Player.h	/^	bool m_isCollidingWithBomb;$/;"	m	class:Player
m_isMoving	Bomb.h	/^	bool m_isMoving;$/;"	m	class:Bomb
m_lastFrame	Animator.h	/^	size_t m_lastFrame;$/;"	m	class:Animator
m_level	BombManager.h	/^	Level* m_level;$/;"	m	class:BombManager
m_level	Game.h	/^	Level* m_level;$/;"	m	class:Game
m_level	PhysicsEngine.h	/^	Level* m_level;$/;"	m	class:PhysicsEngine
m_levelView	Game.h	/^	LevelView* m_levelView;$/;"	m	class:Game
m_loop	Animator.h	/^	bool m_loop;$/;"	m	class:Animator
m_maxNumberOfRespawns	Player.h	/^	short m_maxNumberOfRespawns;$/;"	m	class:Player
m_music	Game.h	/^	sf::Music m_music;$/;"	m	class:Game
m_music	Menu.h	/^	sf::Music m_music;$/;"	m	class:Menu
m_numberOfPlayers	Game.h	/^	int m_numberOfPlayers;$/;"	m	class:Game
m_optionName	Option.h	/^	std::string m_optionName;$/;"	m	class:Option
m_optionReturnButton	Menu.h	/^	Button* m_optionReturnButton;$/;"	m	class:Menu
m_options	Menu.h	/^	bool m_options;$/;"	m	class:Menu
m_orientation	Ray.h	/^	bool m_orientation;$/;"	m	class:Ray
m_pause	Game.h	/^	bool m_pause;$/;"	m	class:Game
m_physicalLevel	PhysicsEngine.h	/^	std::vector <std::vector<PhysicalBody*>> m_physicalLevel;$/;"	m	class:PhysicsEngine
m_physicsEngine	Game.h	/^	PhysicsEngine* m_physicsEngine;$/;"	m	class:Game
m_pigamesLogoSprite	Menu.h	/^	sf::Sprite m_pigamesLogoSprite;$/;"	m	class:Menu
m_pigamesLogoTexture	Menu.h	/^	sf::Texture m_pigamesLogoTexture;$/;"	m	class:Menu
m_playAgain	GUI.h	/^	bool* m_playAgain;$/;"	m	class:GUI
m_playAgain	Game.h	/^	bool m_playAgain;$/;"	m	class:Game
m_playAgainButton	GUI.h	/^	Button* m_playAgainButton;$/;"	m	class:GUI
m_playerOneLives	GUI.h	/^	sf::Text* m_playerOneLives;$/;"	m	class:GUI
m_playerSecondLives	GUI.h	/^	sf::Text* m_playerSecondLives;$/;"	m	class:GUI
m_players	BombManager.h	/^	std::vector<AIPlayer*>* m_players;$/;"	m	class:BombManager
m_players	Game.h	/^	std::vector<AIPlayer*> m_players;$/;"	m	class:Game
m_players	PhysicsEngine.h	/^	std::vector<Player*> m_players;$/;"	m	class:PhysicsEngine
m_playersAnimators	Game.h	/^	std::vector<Animator*>m_playersAnimators;$/;"	m	class:Game
m_playersSlider	Menu.h	/^	Slider* m_playersSlider;$/;"	m	class:Menu
m_posX	PhysicalBody.h	/^	float m_posX;$/;"	m	class:PhysicalBody
m_posY	PhysicalBody.h	/^	float m_posY;$/;"	m	class:PhysicalBody
m_position	Button.h	/^	sf::Vector2f m_position;$/;"	m	class:Button
m_positionInTilesCoordsX	Bomb.h	/^	int m_positionInTilesCoordsX;$/;"	m	class:Bomb
m_positionInTilesCoordsY	Bomb.h	/^	int m_positionInTilesCoordsY;$/;"	m	class:Bomb
m_press	Button.h	/^	bool m_press = false;$/;"	m	class:Button
m_pressSprite	Button.h	/^	sf::Sprite m_pressSprite;$/;"	m	class:Button
m_pressTexture	Button.h	/^	sf::Texture m_pressTexture;$/;"	m	class:Button
m_rayAnimator	Bomb.h	/^	Animator* m_rayAnimator;$/;"	m	class:Bomb
m_rayOnScreenTime	Bomb.h	/^	sf::Time m_rayOnScreenTime;$/;"	m	class:Bomb
m_rayTextureAtlas	Bomb.h	/^	TextureAtlas* m_rayTextureAtlas;$/;"	m	class:Bomb
m_rays	Bomb.h	/^	std::vector<Ray*> m_rays;$/;"	m	class:Bomb
m_rectangle	Option.h	/^	sf::RectangleShape m_rectangle;$/;"	m	class:Option
m_respawnClock	Player.h	/^	sf::Clock m_respawnClock;$/;"	m	class:Player
m_respawnPosition	Player.h	/^	sf::Vector2i m_respawnPosition;$/;"	m	class:Player
m_respawnSafeTime	Player.h	/^	sf::Time m_respawnSafeTime;$/;"	m	class:Player
m_respawns	Player.h	/^	short m_respawns;$/;"	m	class:Player
m_returnToMenuButton	GUI.h	/^	Button* m_returnToMenuButton;$/;"	m	class:GUI
m_rows	TextureAtlas.h	/^	size_t m_rows;$/;"	m	class:TextureAtlas
m_screenHeight	GUI.h	/^	int m_screenHeight;$/;"	m	class:GUI
m_screenWidth	GUI.h	/^	int m_screenWidth;$/;"	m	class:GUI
m_selected	Option.h	/^	bool m_selected;$/;"	m	class:Option
m_side	Ray.h	/^	Side m_side;$/;"	m	class:Ray
m_sideBombCollidingWith	Player.h	/^	sf::Vector2i m_sideBombCollidingWith;$/;"	m	class:Player
m_size	Button.h	/^	sf::Vector2i m_size;$/;"	m	class:Button
m_size	Ray.h	/^	unsigned short m_size;$/;"	m	class:Ray
m_sizeX	PhysicalBody.h	/^	float m_sizeX;$/;"	m	class:PhysicalBody
m_sizeY	PhysicalBody.h	/^	float m_sizeY;$/;"	m	class:PhysicalBody
m_soundBuffer	Bomb.h	/^	sf::SoundBuffer m_soundBuffer;$/;"	m	class:Bomb
m_soundBufferHit	Player.h	/^	sf::SoundBuffer m_soundBufferHit;$/;"	m	class:Player
m_soundBufferPlant	Player.h	/^	sf::SoundBuffer m_soundBufferPlant;$/;"	m	class:Player
m_soundHit	Player.h	/^	sf::Sound m_soundHit;$/;"	m	class:Player
m_soundPlant	Player.h	/^	sf::Sound m_soundPlant;$/;"	m	class:Player
m_sprite	Animator.h	/^	sf::Sprite* m_sprite;$/;"	m	class:Animator
m_sprite	Bomb.h	/^	sf::Sprite m_sprite;$/;"	m	class:Bomb
m_sprite	Player.h	/^	sf::Sprite m_sprite;$/;"	m	class:Player
m_sprite	Ray.h	/^	sf::Sprite m_sprite;$/;"	m	class:Ray
m_state	Bomb.h	/^	State m_state;$/;"	m	class:Bomb
m_states	Animator.h	/^	std::map<std::string, AnimationStateInfo> m_states;$/;"	m	class:Animator
m_statesIterator	Animator.h	/^	std::map<std::string, AnimationStateInfo>::iterator m_statesIterator;$/;"	m	class:Animator
m_text	Button.h	/^	sf::Text m_text;$/;"	m	class:Button
m_texture	Ray.h	/^	sf::Texture * m_texture;$/;"	m	class:Ray
m_texture	TextureAtlas.h	/^	sf::Texture m_texture;$/;"	m	class:TextureAtlas
m_tilesToDeleteAfterExplosion	Bomb.h	/^	std::vector<std::pair<int, int>>m_tilesToDeleteAfterExplosion;$/;"	m	class:Bomb
m_timeToChangeFrame	Animator.h	/^	float m_timeToChangeFrame;$/;"	m	class:Animator
m_unpressSprite	Button.h	/^	sf::Sprite m_unpressSprite;$/;"	m	class:Button
m_unpressTexture	Button.h	/^	sf::Texture m_unpressTexture;$/;"	m	class:Button
m_vX	PhysicalBody.h	/^	float m_vX;$/;"	m	class:PhysicalBody
m_vY	PhysicalBody.h	/^	float m_vY;$/;"	m	class:PhysicalBody
m_version	Level.h	/^	const float m_version = 1.0f;$/;"	m	class:Level
m_view	Level.h	/^	LevelView* m_view;$/;"	m	class:Level
m_volumeSlider	Menu.h	/^	Slider* m_volumeSlider;$/;"	m	class:Menu
m_whoWin	GUI.h	/^	int m_whoWin;$/;"	m	class:GUI
m_width	Level.h	/^	size_t m_width;$/;"	m	class:Level
m_win	Player.h	/^	bool m_win;$/;"	m	class:Player
m_window	Game.h	/^	sf::RenderWindow* m_window;$/;"	m	class:Game
m_window	Menu.h	/^	sf::RenderWindow* m_window;$/;"	m	class:Menu
m_windowHeight	Game.h	/^	unsigned m_windowHeight;$/;"	m	class:Game
m_windowHeight	Menu.h	/^	size_t m_windowHeight;$/;"	m	class:Menu
m_windowWidth	Game.h	/^	unsigned m_windowWidth;$/;"	m	class:Game
m_windowWidth	Menu.h	/^	size_t m_windowWidth;$/;"	m	class:Menu
m_winnerText	GUI.h	/^	sf::Text* m_winnerText;$/;"	m	class:GUI
main	main.cpp	/^int main()$/;"	f
managePlayersTextureDirection	Player.cpp	/^void Player::managePlayersTextureDirection()$/;"	f	class:Player
mouseButtonPressed	Slider.h	/^	bool mouseButtonPressed;$/;"	m	class:Slider
movementX	PhysicalBody.h	/^	float movementX; \/\/This is final value pre-checked for collisions occurance$/;"	m	class:PhysicalBody
movementY	PhysicalBody.h	/^	float movementY;$/;"	m	class:PhysicalBody
numberOfRespawns	Game.h	/^	int numberOfRespawns;$/;"	m	class:Game
oldMousePositionX	Slider.h	/^	float oldMousePositionX;$/;"	m	class:Slider
oldMousePositionY	Slider.h	/^	float oldMousePositionY;$/;"	m	class:Slider
options	Menu.cpp	/^void Menu::options()$/;"	f	class:Menu
optionsText	Menu.h	/^	sf::Text optionsText[4];$/;"	m	class:Menu
override	LevelView.h	/^	virtual void draw(sf::RenderTarget & target, sf::RenderStates states) const override;$/;"	m	class:LevelView
override	Player.h	/^	virtual void draw(sf::RenderTarget & target, sf::RenderStates states) const override;$/;"	m	class:Player
pause	Game.cpp	/^void Game::pause()$/;"	f	class:Game
playersLives	Menu.h	/^	float playersLives, volume;$/;"	m	class:Menu
processEvents	GUI.cpp	/^void GUI::processEvents(sf::Vector2i mousePos, sf::Event* eventPointer)$/;"	f	class:GUI
processEvents	Game.cpp	/^void Game::processEvents()$/;"	f	class:Game
processEvents	Menu.cpp	/^void Menu::processEvents()$/;"	f	class:Menu
rayLength	Bomb.h	/^	struct rayLength$/;"	s	class:Bomb
rays	BombManager.h	/^	std::vector<Ray*>rays;$/;"	m	class:BombManager
rect	GUI.h	/^	sf::RectangleShape* rect;$/;"	m	class:GUI
right	Bomb.h	/^		int right;$/;"	m	struct:Bomb::rayLength
rightBound	PhysicalBody.h	/^		unsigned int rightBound;$/;"	m	struct:PhysicalBody::MovableBodyInfo
run	AIPlayer.cpp	/^void AIPlayer::run(std::pair<int, int> &input)$/;"	f	class:AIPlayer
setBodyPositionInfo	PhysicsEngine.cpp	/^void PhysicsEngine::setBodyPositionInfo(int key)$/;"	f	class:PhysicsEngine
setBodyPositionNextToAnotherBodyInAxisX	PhysicsEngine.cpp	/^void PhysicsEngine::setBodyPositionNextToAnotherBodyInAxisX(PhysicalBody * body, PhysicalBody * tile)$/;"	f	class:PhysicsEngine
setBodyPositionNextToAnotherBodyInAxisY	PhysicsEngine.cpp	/^void PhysicsEngine::setBodyPositionNextToAnotherBodyInAxisY(PhysicalBody * body, PhysicalBody * tile)$/;"	f	class:PhysicsEngine
size	LevelView.h	/^	int size;$/;"	m	class:LevelView
slider	Slider.h	/^	decltype(belt) slider;$/;"	m	class:Slider
sliderAfterGrasper	Slider.h	/^	decltype(belt) sliderAfterGrasper;$/;"	m	class:Slider
sliderOrient	Slider.h	/^	sliderOrientation sliderOrient;$/;"	m	class:Slider
sliderOrientation	Slider.h	/^	enum sliderOrientation{vertical,horizontal};$/;"	g	class:Slider
state	AIPlayer.h	/^	AIPlayerStates state;$/;"	m	class:AIPlayer
state	PhysicalBody.h	/^		BodyPositionState state;$/;"	m	struct:PhysicalBody::MovableBodyInfo
up	Bomb.h	/^		int up;$/;"	m	struct:Bomb::rayLength
upBound	PhysicalBody.h	/^		unsigned int upBound;$/;"	m	struct:PhysicalBody::MovableBodyInfo
update	Game.cpp	/^void Game::update(float deltaTime)$/;"	f	class:Game
value	Slider.h	/^	float value;$/;"	m	class:Slider
vertical	Slider.h	/^	enum sliderOrientation{vertical,horizontal};$/;"	e	enum:Slider::sliderOrientation
volume	Menu.h	/^	float playersLives, volume;$/;"	m	class:Menu
waitingForExplosion	Bomb.h	/^		waitingForExplosion,$/;"	e	enum:Bomb::State
~Animator	Animator.cpp	/^Animator::~Animator()$/;"	f	class:Animator
~Bomb	Bomb.cpp	/^Bomb::~Bomb()$/;"	f	class:Bomb
~BombManager	BombManager.cpp	/^BombManager::~BombManager()$/;"	f	class:BombManager
~Button	Button.cpp	/^Button::~Button()$/;"	f	class:Button
~GUI	GUI.cpp	/^GUI::~GUI()$/;"	f	class:GUI
~Game	Game.cpp	/^Game::~Game()$/;"	f	class:Game
~Level	Level.cpp	/^Level::~Level()$/;"	f	class:Level
~LevelView	LevelView.cpp	/^LevelView::~LevelView()$/;"	f	class:LevelView
~Menu	Menu.cpp	/^Menu::~Menu()$/;"	f	class:Menu
~Option	Option.cpp	/^Option::~Option()$/;"	f	class:Option
~PhysicalBody	PhysicalBody.cpp	/^PhysicalBody::~PhysicalBody()$/;"	f	class:PhysicalBody
~PhysicsEngine	PhysicsEngine.cpp	/^PhysicsEngine::~PhysicsEngine()$/;"	f	class:PhysicsEngine
~Player	Player.cpp	/^Player::~Player()$/;"	f	class:Player
~Ray	Ray.cpp	/^Ray::~Ray()$/;"	f	class:Ray
~Slider	Slider.cpp	/^Slider::~Slider()$/;"	f	class:Slider
~TextureAtlas	TextureAtlas.cpp	/^TextureAtlas::~TextureAtlas()$/;"	f	class:TextureAtlas
